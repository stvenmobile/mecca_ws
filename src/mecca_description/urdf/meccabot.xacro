<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="meccabot_robot">

  <xacro:include filename="inertial_macros.xacro"/>
  <xacro:include filename="gazebo_control.xacro"/>

  <!-- Parameters -->
  <xacro:property name="wheel_radius" value="0.05"/>
  <xacro:property name="wheel_thickness" value="0.03"/>
  <xacro:property name="chassis_length" value="0.275"/>
  <xacro:property name="chassis_width" value="0.145"/>
  <xacro:property name="chassis_height" value="0.125"/>
  <xacro:property name="ground_clearance" value="0.015"/>

  <xacro:property name="chassis_half_length" value="${chassis_length/2}"/>
  <xacro:property name="chassis_half_width" value="${chassis_width/2}"/>
  <xacro:property name="wheel_x_offset" value="0.05"/>
  <xacro:property name="wheel_y_offset" value="0.0"/>
  <xacro:property name="chassis_z_offset" value="${wheel_radius + ground_clearance}"/>
  <xacro:property name="wheel_z_offset" value="${-ground_clearance}"/>

    <!-- Define Colors -->
    <material name="white">
        <color rgba="1 1 1 1" />
    </material>

    <material name="orange">
        <color rgba="1 0.3 0.1 1" />
    </material>

    <material name="red">
        <color rgba="1 0 0 1" />
    </material>

    <material name="blue">
        <color rgba="0.0 0.0 0.8 1.0" />
    </material>

    <material name="green">
        <color rgba="0.2 0.9 0.2 1"/>
    </material>

    <material name="darkgrey">
        <color rgba="0.1 0.1 0.1 1.0" />
    </material>

    <material name="grey">
        <color rgba="0.5 0.5 0.5 1.0" />
    </material>

    <material name="black">
        <color rgba="0 0 0 1" />
    </material>

  <!-- Base link -->
  <link name="base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <joint name="base_to_chassis" type="fixed">
    <parent link="base_link"/>
    <child link="chassis_link"/>
    <origin xyz="0 0 ${chassis_z_offset}" rpy="0 0 0"/>
  </joint>

  <!-- Chassis -->
  <link name="chassis_link">
    <inertial>
      <origin xyz="0 0 0.0625" rpy="0 0 0"/>
      <mass value="5.0"/>
      <inertia
        ixx="${(1/12)*5.0*(chassis_width*chassis_width + chassis_height*chassis_height)}"
        ixy="0.0" ixz="0.0"
        iyy="${(1/12)*5.0*(chassis_length*chassis_length + chassis_height*chassis_height)}"
        iyz="0.0"
        izz="${(1/12)*5.0*(chassis_length*chassis_length + chassis_width*chassis_width)}"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0.0625" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="green"/>
    </visual>
    <collision>
      <origin xyz="0 0 0.0625" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
  </link>

  <!-- Wheel macro -->
  <xacro:macro name="wheel" params="name x y z rpy">
    <joint name="${name}_joint" type="continuous">
      <parent link="chassis_link"/>
      <child link="${name}"/>
      <origin xyz="${x} ${y} ${z}" rpy="${rpy}"/>
      <axis xyz="0 1 0"/>
    </joint>
    <link name="${name}">
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.5"/>
        <inertia
          ixx="0.001" ixy="0.0" ixz="0.0"
          iyy="0.001" iyz="0.0"
          izz="0.001"/>
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="1.5708 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <!-- Instantiate wheels -->
  <xacro:wheel name="front_left_wheel"
               x="${chassis_half_length - wheel_x_offset}"
               y="${chassis_half_width + wheel_thickness/2}"
               z="${wheel_z_offset}"
               rpy="0 0 0"/>

  <xacro:wheel name="front_right_wheel"
               x="${chassis_half_length - wheel_x_offset}"
               y="${-(chassis_half_width + wheel_thickness/2)}"
               z="${wheel_z_offset}"
               rpy="0 0 0"/>

  <xacro:wheel name="rear_left_wheel"
               x="${-(chassis_half_length - wheel_x_offset)}"
               y="${chassis_half_width + wheel_thickness/2}"
               z="${wheel_z_offset}"
               rpy="0 0 0"/>

  <xacro:wheel name="rear_right_wheel"
               x="${-(chassis_half_length - wheel_x_offset)}"
               y="${-(chassis_half_width + wheel_thickness/2)}"
               z="${wheel_z_offset}"
               rpy="0 0 0"/>

  <!-- Lidar -->
  <link name="lidar_mount">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.04"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.04"/>
      </geometry>
    </collision>
  </link>
  <joint name="lidar_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_mount"/>
    <origin xyz="-0.050 0 ${0.14 + chassis_z_offset}" rpy="0 0 0"/>
  </joint>

<ros2_control name="MecanumRobot" type="system">
  <hardware>
    <plugin>mecanum_hardware_interface/MecanumHardware</plugin>
  </hardware>
  <joint name="front_left_wheel_joint">
    <command_interface name="velocity"/>
    <state_interface name="position"/>
    <state_interface name="velocity"/>
  </joint>
  <joint name="front_right_wheel_joint">
    <command_interface name="velocity"/>
    <state_interface name="position"/>
    <state_interface name="velocity"/>
  </joint>
  <joint name="rear_left_wheel_joint">
    <command_interface name="velocity"/>
    <state_interface name="position"/>
    <state_interface name="velocity"/>
  </joint>
  <joint name="rear_right_wheel_joint">
    <command_interface name="velocity"/>
    <state_interface name="position"/>
    <state_interface name="velocity"/>
  </joint>
</ros2_control>


</robot>
